const mongoose = require('mongoose')
const bcrypt = require('bcrypt')

const UserSchema = new mongoose.Schema(
  {
<<<<<<< Updated upstream
    firstName: {
=======
    userName: {
>>>>>>> Stashed changes
      type: String,
      lowercase: true,
      required: true
    },
    lastName: {
      type: String,
      lowercase: true,
      required: true
    },
    password: {
      type: String,
      required: true,
      trim: true
    },
    email: {
      type: String,
      unique: true,
      required: true,
      trim: true
    },
    status: {
      type: String,
      default: 'Pending',
      enum: ['Deleted', 'Active', 'Pending'],
      required: true
    },
    role: {
      type: String,
      default: 'GUEST',
    },
<<<<<<< Updated upstream
  
=======
    identityDocument: {
      type: String,
      enum: ['DNI', 'RUC', 'EXTRANJERIA'],
      lowercase: true
    },
    identityNumber: {
      type: String,
      lowercase: true
    },
    names: {
      type: String,
      lowercase: true
    },
    primaryLastName: {
      type: String,
      lowercase: true,
    },
    secondLastName: {
      type: String,
      lowercase: true,
    },
    fullName: {
      type: String,
      lowercase: true,
    },
>>>>>>> Stashed changes
    slug: {
      type: String,
      lowercase: true,
    },
<<<<<<< Updated upstream
    url_photo: {
=======
    presentation: {
      type: String,
      lowercase: true,
    },
    urlPhoto: {
>>>>>>> Stashed changes
      type: String,
      lowercase: true,
    },
    urlBanner: {
      type: String,
      lowercase: true,
    },
    gender: {
      type: String,
      lowercase: true,
    },
<<<<<<< Updated upstream
=======
    emailAlternative: {
      type: String,
      trim: true,
      lowercase: true,
    },
>>>>>>> Stashed changes
    phone: {
      type: String,
      lowercase: true,
    },
    passwordResetToken: String,
    passwordResetExpires: Date
  },
  {
    timestamps: true
  }
)

UserSchema.pre('save', async function(next) {
  const user = this
  try {
    if (!user.isModified('password')) {
      return next()
    }
    const salt = await bcrypt.genSalt(10)
    const hash = await bcrypt.hash(user.password, salt)
    user.password = hash

  } catch(error) {
    next(error)
  }
  next()
})

UserSchema.methods.comparePassword = async function (password) {
  const user = this
  return await bcrypt.compare(password, user.password)
}

UserSchema.methods.changePassword = async function (password){
  const user = this;
  return await bcrypt.hash(password, 10);
}

UserSchema.virtual('profile').get(function() {
  const { userName, email } = this

  return { fullName: `${userName}`, email }
})

module.exports = mongoose.model('User', UserSchema)
